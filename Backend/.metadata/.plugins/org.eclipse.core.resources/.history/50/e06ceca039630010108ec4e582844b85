package com.auto.technician.dashboard.service;


import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.auto.technician.dashboard.clients.PostingClient;
import com.auto.technician.dashboard.clients.TechnicianClient;
import com.auto.technician.dashboard.dto.DealerPostUpdateDto;
import com.auto.technician.dashboard.dto.FeignEmailRequestDto;
import com.auto.technician.dashboard.dto.TechnicianDto;
import com.auto.technician.dashboard.dto.TechnicianPostsDTO;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TechnicianDashboardService {
	
    private final TechnicianClient technicianClient;

	private final PostingClient postingClient;

	public ResponseEntity<?> getAcceptedPosts(FeignEmailRequestDto dto) {
        TechnicianDto technician = technicianClient.getTechnicianByEmail(dto);
        if (technician == null) {
            return ResponseEntity.status(404).body("Technician not found.");
        }
        
         List<Long> acceptedPostIds = technicianClient.getAcceptedPostsByEmail(dto);
         if (acceptedPostIds == null || acceptedPostIds.isEmpty()) {
             return ResponseEntity.ok("No accepted posts found for this technician.");
         }

         // Step 3: Fetch All Posts
         List<TechnicianPostsDTO> allPostings = technicianClient.getAllPostingsFromPostingsService(dto);

         // Step 4: Filter Only Accepted Posts

         List<TechnicianPostsDTO> acceptedPosts = allPostings.stream()
             .filter(p -> acceptedPostIds.contains(p.getId()))
             .peek(p -> {
                 if (p.getStatus() != null && p.getStatus().equalsIgnoreCase("Pending")) {
                     p.setStatus("ACCEPTED");

                     //  Set acceptedAt = now
                     Date now = new Date();
                     p.setAcceptedAt(now);

                     //  Set completeBy = now + 7 days
                     Calendar cal = Calendar.getInstance();
                     cal.setTime(now);
                     cal.add(Calendar.DATE, 7);
                     p.setCompleteBy(cal.getTime());
                 }
             })
             .collect(Collectors.toList());


         return ResponseEntity.ok(acceptedPosts);
         


	}
	
	public ResponseEntity<?> onAcceptedDealerSidePostUpdate(List<TechnicianPostsDTO> acceptedPosts) {
	    try {
	        List<DealerAcceptedPostUpdateFromTechDashDto> requestDtos = acceptedPosts.stream()
	            .map(post -> {
	                DealerAcceptedPostUpdateFromTechDashDto dto = new DealerAcceptedPostUpdateFromTechDashDto();
	                dto.setPostId(post.getId());
	                dto.setStatus(PostStatus.valueOf(post.getStatus())); // Assuming it's a string like "COMPLETED"
	                dto.setAcceptedAt(post.getAcceptedAt());
	                dto.setExpectedCompletionBy(post.getCompleteBy());
	                dto.setTechnicianName(post.getName()); // ðŸ‘ˆ match correctly
	                dto.setTechnicianEmail(post.getEmail()); // ðŸ‘ˆ match correctly
	                return dto;
	            })
	            .collect(Collectors.toList());

	        List<DealerAcceptedPostUpdateFromTechDashDto> updatedPosts = postingClient.submitMultiplePost(requestDtos);
	        return ResponseEntity.ok(updatedPosts);

	    } catch (Exception e) {
	        return ResponseEntity.status(500).body("Failed to update dealer-side posts: " + e.getMessage());
	    }
	}

}
