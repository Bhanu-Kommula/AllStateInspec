package com.auto.technician.dashboard.service;


import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.auto.technician.dashboard.clients.PostingClient;
import com.auto.technician.dashboard.clients.TechnicianClient;
import com.auto.technician.dashboard.dto.DealerPostUpdateDto;
import com.auto.technician.dashboard.dto.FeignEmailRequestDto;
import com.auto.technician.dashboard.dto.TechnicianDto;
import com.auto.technician.dashboard.dto.TechnicianPostsDTO;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TechnicianDashboardService {
	
    private final TechnicianClient technicianClient;

	private final PostingClient postingClient;

	public ResponseEntity<?> getAcceptedPosts(FeignEmailRequestDto dto) {
	    TechnicianDto technician = technicianClient.getTechnicianByEmail(dto);
	    if (technician == null) {
	        return ResponseEntity.status(404).body("Technician not found.");
	    }

	    List<Long> acceptedPostIds = technicianClient.getAcceptedPostsByEmail(dto);
	    if (acceptedPostIds == null || acceptedPostIds.isEmpty()) {
	        return ResponseEntity.ok("No accepted posts found for this technician.");
	    }

	    List<TechnicianPostsDTO> allPostings = technicianClient.getAllPostingsFromPostingsService(dto);

	    List<TechnicianPostsDTO> acceptedPosts = allPostings.stream()
	        .filter(p -> acceptedPostIds.contains(p.getPostId()))
	        .peek(p -> {
	            if (p.getStatus() != null && p.getStatus().equalsIgnoreCase("Pending")) {
	                p.setStatus("ACCEPTED");

	                Date now = new Date();
	                p.setAcceptedAt(now);

	                Calendar cal = Calendar.getInstance();
	                cal.setTime(now);
	                cal.add(Calendar.DATE, 7);
	                p.setCompleteBy(cal.getTime());
	            }

	            p.setTechnicianName(technician.getName());
	            p.setTechnicianEmail(technician.getEmail());

	            // âœ… Copy id to postId
	            p.setPostId(p.getPostId());
	        })
	        .collect(Collectors.toList());

	    return ResponseEntity.ok(acceptedPosts);
	}


	
	public ResponseEntity<?> onAcceptedDealerSidePostUpdate(List<DealerPostUpdateDto> acceptedPosts) {
	    try {
	        // Call postings-service via Feign to update the dealer's posts
	        List<DealerPostUpdateDto> updatedPosts = postingClient.submitMultiplePost(acceptedPosts);

	        return ResponseEntity.ok(updatedPosts); // return what posting service responds with
	    } catch (Exception e) {
	        return ResponseEntity.status(500).body("Failed to update dealer-side posts: " + e.getMessage());
	    }
	
	
	}
}
