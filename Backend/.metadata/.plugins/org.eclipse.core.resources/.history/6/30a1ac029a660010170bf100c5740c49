package com.auto.dealer.service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.auto.dealer.dto.PostingDto;
import com.auto.dealer.dto.UpdateDealerDto;
import com.auto.dealer.model.Dealer;
import com.auto.dealer.model.DealerAuditLog;
import com.auto.dealer.repository.DealerAuditLogRepository;
import com.auto.dealer.repository.DealerRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class DealerService {

    private final DealerRepository repo;
    private final DealerAuditLogRepository auditRepo;

    public Dealer register(Dealer dealer) {
        repo.save(dealer);
        return dealer;
    }

    public ResponseEntity<?> login(String email) {
        Optional<Dealer> dealerOpt = repo.findByEmail(email);

        if (dealerOpt.isPresent()) {
            Dealer dealer = dealerOpt.get();
            PostingDto postingInfo = PostingDto.builder()
                    .email(dealer.getEmail())
                    .name(dealer.getName())
                    .build();
            return ResponseEntity.ok(postingInfo);
        } else {
            Map<String, String> error = new HashMap<>();
            error.put("error", "User not found. Please check your email.");
            return ResponseEntity.status(401).body(error);
        }
    }

    public ResponseEntity<?> updateProfile(UpdateDealerDto dto) {
        if (dto.getEmail() == null || dto.getEmail().isBlank()) {
            return ResponseEntity.badRequest().body("Email is required for profile update.");
        }

        Optional<Dealer> optDealer = repo.findByEmail(dto.getEmail());

        if (optDealer.isEmpty()) {
            return ResponseEntity.status(404).body("Dealer not found with email: " + dto.getEmail());
        }

        Dealer dealer = optDealer.get();
        boolean updated = false;

        // Update name
        if (dto.getName() != null && !dto.getName().equals(dealer.getName())) {
            saveAudit(dealer.getId(), "name", dealer.getName(), dto.getName(), dto.getUpdatedBy());
            dealer.setName(dto.getName());
            updated = true;
        }

        // Update password with checks
        if (dto.getPassword() != null && !dto.getPassword().isBlank()) {
            if (dto.getPassword().length() < 8) {
                return ResponseEntity.badRequest().body("Password must be at least 8 characters long.");
            }
            if (dto.getPassword().equals(dealer.getPassword())) {
                return ResponseEntity.badRequest().body("New password must be different from the old password.");
            }
            saveAudit(dealer.getId(), "password", "********", "********", dto.getUpdatedBy());
            dealer.setPassword(dto.getPassword());
            updated = true;
        }

        // Update location
        if (dto.getLocation() != null && !dto.getLocation().equals(dealer.getLocation())) {
            saveAudit(dealer.getId(), "location", dealer.getLocation(), dto.getLocation(), dto.getUpdatedBy());
            dealer.setLocation(dto.getLocation());
            updated = true;
        }

        // Update zipcode
        if (dto.getZipcode() != null && !dto.getZipcode().equals(dealer.getZipcode())) {
            saveAudit(dealer.getId(), "zipcode", dealer.getZipcode(), dto.getZipcode(), dto.getUpdatedBy());
            dealer.setZipcode(dto.getZipcode());
            updated = true;
        }

        // No updates found
        if (!updated) {
            return ResponseEntity.ok("No changes were made.");
        }

        repo.save(dealer);
        return ResponseEntity.ok(dealer);
    }

    private void saveAudit(Long dealerId, String fieldName, String oldVal, String newVal, String updatedBy) {
        DealerAuditLog log = DealerAuditLog.builder()
                .dealerId(dealerId)
                .fieldName(fieldName)
                .oldValue(oldVal)
                .newValue(newVal)
                .updatedAt(LocalDateTime.now())
                .updatedBy(updatedBy)
                .build();
        auditRepo.save(log);
    }
}