package com.auto.technician.dashboard.service;


import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.auto.technician.dashboard.clients.PostingClient;
import com.auto.technician.dashboard.clients.TechnicianClient;
import com.auto.technician.dashboard.dto.DealerPostUpdateDto;
import com.auto.technician.dashboard.dto.FeignEmailRequestDto;
import com.auto.technician.dashboard.dto.TechnicianAcceptedPostResponseDto;
import com.auto.technician.dashboard.dto.TechnicianDto;
import com.auto.technician.dashboard.dto.TechnicianPostsDTO;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class TechnicianDashboardService {
	
    private final TechnicianClient technicianClient;

	private final PostingClient postingClient;

	public ResponseEntity<?> processAndUpdateAcceptedPosts(FeignEmailRequestDto dto) {
	    TechnicianDto technician = technicianClient.getTechnicianByEmail(dto);
	    if (technician == null) {
	        return ResponseEntity.status(404).body("Technician not found.");
	    }

	    List<Long> acceptedPostIds = technicianClient.getAcceptedPostsByEmail(dto);
	    if (acceptedPostIds == null || acceptedPostIds.isEmpty()) {
	        return ResponseEntity.ok("No accepted posts found for this technician.");
	    }

	    List<TechnicianPostsDTO> allPostings = technicianClient.getAllPostingsFromPostingsService(dto);

	    // ✅ Step 1: Enrich posts
	    List<DealerPostUpdateDto> updatedPosts = allPostings.stream()
	        .filter(p -> acceptedPostIds.contains(p.getId()))
	        .map(p -> {
	            if ("PENDING".equalsIgnoreCase(p.getStatus())) {
	                Date now = new Date();
	                p.setStatus("ACCEPTED");
	                p.setAcceptedAt(now);
	                Calendar cal = Calendar.getInstance();
	                cal.setTime(now);
	                cal.add(Calendar.DATE, 7);
	                p.setCompleteBy(cal.getTime());
	            }

	            p.setTechnicianName(technician.getName());
	            p.setTechnicianEmail(technician.getEmail());

	            DealerPostUpdateDto updateDto = new DealerPostUpdateDto();
	            updateDto.setPostId(p.getId());
	            updateDto.setStatus(p.getStatus());
	            updateDto.setAcceptedAt(p.getAcceptedAt());
	            updateDto.setExpectedCompletionBy(p.getCompleteBy());
	            updateDto.setTechnicianName(p.getTechnicianName());
	            updateDto.setTechnicianEmail(p.getTechnicianEmail());

	            return updateDto;
	        })
	        .collect(Collectors.toList());

	    // ✅ Step 2: Save to postings DB
	    List<DealerPostUpdateDto> response;
	    try {
	        response = postingClient.submitMultiplePost(updatedPosts);
	    } catch (Exception e) {
	        return ResponseEntity.status(500).body("❌ Failed to update dealer posts: " + e.getMessage());
	    }

	    // ✅ Step 3: Return updated posts for frontend
	    return ResponseEntity.ok(response);
	}
}
